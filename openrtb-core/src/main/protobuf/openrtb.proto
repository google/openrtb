/*
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";
package com.google.openrtb;
option java_outer_classname = "OpenRtb";

import "openrtb-native.proto";

/**
 * OpenRTB extensions ("ext" fields in the spec & JSON representation)
 * are represented here by Protocol Buffer extensions. This proto only
 * reserves the range of IDs 100-199 at every extensible object.
 * <p>
 * Assigned codes:
 * <ol>
 *   <li>100: "Internal" extensions, used by a RTB toolkit (like Open Bidder),
 *      may contribute to the mapping but won't produce on-wire extensions.</li>
 *   <li>101: DoubleClick Ad Exchange ("Link" extensions).</li>
 *   <li>102: DoubleClick Ad Exchange (on-wire extensions).</li>
 * </ol>
 */

/*
 * OpenRTB 6.1: The IAB’s contextual taxonomy for categorization.
 */
enum ContentCategory {
  IAB1 = 1;        // Arts & Entertainment
  IAB1_1 = 2;      // Books & Literature
  IAB1_2 = 3;      // Celebrity Fan/Gossip
  IAB1_3 = 4;      // Fine Art
  IAB1_4 = 5;      // Humor
  IAB1_5 = 6;      // Movies
  IAB1_6 = 7;      // Music
  IAB1_7 = 8;      // Television
  IAB2 = 9;        // Automotive
  IAB2_1 = 10;     // Auto Parts
  IAB2_2 = 11;     // Auto Repair
  IAB2_3 = 12;     // Buying/Selling Cars
  IAB2_4 = 13;     // Car Culture
  IAB2_5 = 14;     // Certified Pre-Owned
  IAB2_6 = 15;     // Convertible
  IAB2_7 = 16;     // Coupe
  IAB2_8 = 17;     // Crossover
  IAB2_9 = 18;     // Diesel
  IAB2_10 = 19;    // Electric Vehicle
  IAB2_11 = 20;    // Hatchback
  IAB2_12 = 21;    // Hybrid
  IAB2_13 = 22;    // Luxury
  IAB2_14 = 23;    // MiniVan
  IAB2_15 = 24;    // Mororcycles
  IAB2_16 = 25;    // Off-Road Vehicles
  IAB2_17 = 26;    // Performance Vehicles
  IAB2_18 = 27;    // Pickup
  IAB2_19 = 28;    // Road-Side Assistance
  IAB2_20 = 29;    // Sedan
  IAB2_21 = 30;    // Trucks & Accessories
  IAB2_22 = 31;    // Vintage Cars
  IAB2_23 = 32;    // Wagon
  IAB3 = 33;       // Business
  IAB3_1 = 34;     // Advertising
  IAB3_2 = 35;     // Agriculture
  IAB3_3 = 36;     // Biotech/Biomedical
  IAB3_4 = 37;     // Business Software
  IAB3_5 = 38;     // Construction
  IAB3_6 = 39;     // Forestry
  IAB3_7 = 40;     // Government
  IAB3_8 = 41;     // Green Solutions
  IAB3_9 = 42;     // Human Resources
  IAB3_10 = 43;    // Logistics
  IAB3_11 = 44;    // Marketing
  IAB3_12 = 45;    // Metals
  IAB4 = 46;       // Careers
  IAB4_1 = 47;     // Career Planning
  IAB4_2 = 48;     // College
  IAB4_3 = 49;     // Financial  Aid
  IAB4_4 = 50;     // Job Fairs
  IAB4_5 = 51;     // Job Search
  IAB4_6 = 52;     // Resume Writing/Advice
  IAB4_7 = 53;     // Nursing
  IAB4_8 = 54;     // Scholarships
  IAB4_9 = 55;     // Telecommuting
  IAB4_10 = 56;    // U.S. Military
  IAB4_11 = 57;    // Career Advice
  IAB5 = 58;       // Education
  IAB5_1 = 59;     // 7-12 Education
  IAB5_2 = 60;     // Adult Education
  IAB5_3 = 61;     // Art History
  IAB5_4 = 62;     // Colledge Administration
  IAB5_5 = 63;     // College Life
  IAB5_6 = 64;     // Distance Learning
  IAB5_7 = 65;     // English as a 2nd Language
  IAB5_8 = 66;     // Language Learning
  IAB5_9 = 67;     // Graduate School
  IAB5_10 = 68;    // Homeschooling
  IAB5_11 = 69;    // Homework/Study Tips
  IAB5_12 = 70;    // K-6 Educators
  IAB5_13 = 71;    // Private School
  IAB5_14 = 72;    // Special Education
  IAB5_15 = 73;    // Studying Business
  IAB6 = 74;       // Family & Parenting
  IAB6_1 = 75;     // Adoption
  IAB6_2 = 76;     // Babies & Toddlers
  IAB6_3 = 77;     // Daycare/Pre School
  IAB6_4 = 78;     // Family Internet
  IAB6_5 = 79;     // Parenting - K-6 Kids
  IAB6_6 = 80;     // Parenting teens
  IAB6_7 = 81;     // Pregnancy
  IAB6_8 = 82;     // Special Needs Kids
  IAB6_9 = 83;     // Eldercare
  IAB7 = 84;       // Health & Fitness
  IAB7_1 = 85;     // Exercise
  IAB7_2 = 86;     // A.D.D.
  IAB7_3 = 87;     // AIDS/HIV
  IAB7_4 = 88;     // Allergies
  IAB7_5 = 89;     // Alternative Medicine
  IAB7_6 = 90;     // Arthritis
  IAB7_7 = 91;     // Asthma
  IAB7_8 = 92;     // Autism/PDD
  IAB7_9 = 93;     // Bipolar Disorder
  IAB7_10 = 94;    // Brain Tumor
  IAB7_11 = 95;    // Cancer
  IAB7_12 = 96;    // Cholesterol
  IAB7_13 = 97;    // Chronic Fatigue Syndrome
  IAB7_14 = 98;    // Chronic Pain
  IAB7_15 = 99;    // Cold & Flu
  IAB7_16 = 100;   // Deafness
  IAB7_17 = 101;   // Dental Care
  IAB7_18 = 102;   // Depression
  IAB7_19 = 103;   // Dermatology
  IAB7_20 = 104;   // Diabetes
  IAB7_21 = 105;   // Epilepsy
  IAB7_22 = 106;   // GERD/Acid Reflux
  IAB7_23 = 107;   // Headaches/Migraines
  IAB7_24 = 108;   // Heart Disease
  IAB7_25 = 109;   // Herbs for Health
  IAB7_26 = 110;   // Holistic Healing
  IAB7_27 = 111;   // IBS/Crohn's Disease
  IAB7_28 = 112;   // Incest/Abuse Support
  IAB7_29 = 113;   // Incontinence
  IAB7_30 = 114;   // Infertility
  IAB7_31 = 115;   // Men's Health
  IAB7_32 = 116;   // Nutrition
  IAB7_33 = 117;   // Orthopedics
  IAB7_34 = 118;   // Panic/Anxiety Disorders
  IAB7_35 = 119;   // Pediatrics
  IAB7_36 = 120;   // Physical Therapy
  IAB7_37 = 121;   // Psychology/Psychiatry
  IAB7_38 = 122;   // Senor Health
  IAB7_39 = 123;   // Sexuality
  IAB7_40 = 124;   // Sleep Disorders
  IAB7_41 = 125;   // Smoking Cessation
  IAB7_42 = 126;   // Substance Abuse
  IAB7_43 = 127;   // Thyroid Disease
  IAB7_44 = 128;   // Weight Loss
  IAB7_45 = 129;   // Women's Health
  IAB8 = 130;      // Food & Drink
  IAB8_1 = 131;    // American Cuisine
  IAB8_2 = 132;    // Barbecues & Grilling
  IAB8_3 = 133;    // Cajun/Creole
  IAB8_4 = 134;    // Chinese Cuisine
  IAB8_5 = 135;    // Cocktails/Beer
  IAB8_6 = 136;    // Coffee/Tea
  IAB8_7 = 137;    // Cuisine-Specific
  IAB8_8 = 138;    // Desserts & Baking
  IAB8_9 = 139;    // Dining Out
  IAB8_10 = 140;   // Food Allergies
  IAB8_11 = 141;   // French Cuisine
  IAB8_12 = 142;   // Health/Lowfat Cooking
  IAB8_13 = 143;   // Italian Cuisine
  IAB8_14 = 144;   // Japanese Cuisine
  IAB8_15 = 145;   // Mexican Cuisine
  IAB8_16 = 146;   // Vegan
  IAB8_17 = 147;   // Vegetarian
  IAB8_18 = 148;   // Wine
  IAB9 = 149;      // Hobbies & Interests
  IAB9_1 = 150;    // Art/Technology
  IAB9_2 = 151;    // Arts & Crafts
  IAB9_3 = 152;    // Beadwork
  IAB9_4 = 153;    // Birdwatching
  IAB9_5 = 154;    // Board Games/Puzzles
  IAB9_6 = 155;    // Candle & Soap Making
  IAB9_7 = 156;    // Card Games
  IAB9_8 = 157;    // Chess
  IAB9_9 = 158;    // Cigars
  IAB9_10 = 159;   // Collecting
  IAB9_11 = 160;   // Comic Books
  IAB9_12 = 161;   // Drawing/Sketching
  IAB9_13 = 162;   // Freelance Writing
  IAB9_14 = 163;   // Geneaology
  IAB9_15 = 164;   // Getting Published
  IAB9_16 = 165;   // Guitar
  IAB9_17 = 166;   // Home Recording
  IAB9_18 = 167;   // Investors & Patents
  IAB9_19 = 168;   // Jewelry Making
  IAB9_20 = 169;   // Magic & Illusion
  IAB9_21 = 170;   // Needlework
  IAB9_22 = 171;   // Painting
  IAB9_23 = 172;   // Photography
  IAB9_24 = 173;   // Radio
  IAB9_25 = 174;   // Roleplaying Games
  IAB9_26 = 175;   // Sci-Fi & Fantasy
  IAB9_27 = 176;   // Scrapbooking
  IAB9_28 = 177;   // Screenwriting
  IAB9_29 = 178;   // Stamps & Coins
  IAB9_30 = 179;   // Video & Computer Games
  IAB9_31 = 180;   // Woodworking
  IAB10 = 181;     // Home & Garden
  IAB10_1 = 182;   // Appliances
  IAB10_2 = 183;   // Entertaining
  IAB10_3 = 184;   // Environmental Safety
  IAB10_4 = 185;   // Gardening
  IAB10_5 = 186;   // Home Repair
  IAB10_6 = 187;   // Home Theater
  IAB10_7 = 188;   // Interior  Decorating
  IAB10_8 = 189;   // Landscaping
  IAB10_9 = 190;   // Remodeling & Construction
  IAB11 = 191;     // Law, Gov't & Politics
  IAB11_1 = 192;   // Immigration
  IAB11_2 = 193;   // Legal Issues
  IAB11_3 = 194;   // U.S. Government Resources
  IAB11_4 = 195;   // Politics
  IAB11_5 = 196;   // Commentary
  IAB12 = 197;     // News
  IAB12_1 = 198;   // International News
  IAB12_2 = 199;   // National News
  IAB12_3 = 200;   // Local News
  IAB13 = 201;     // Personal Finance
  IAB13_1 = 202;   // Beginning Investing
  IAB13_2 = 203;   // Credit/Debt & Loans
  IAB13_3 = 204;   // Financial News
  IAB13_4 = 205;   // Financial Planning
  IAB13_5 = 206;   // Hedge Fund
  IAB13_6 = 207;   // Insurance
  IAB13_7 = 208;   // Investing
  IAB13_8 = 209;   // Mutual Funds
  IAB13_9 = 210;   // Options
  IAB13_10 = 211;  // Retirement Planning
  IAB13_11 = 212;  // Stocks
  IAB13_12 = 213;  // Tax Planning
  IAB14 = 214;     // Society
  IAB14_1 = 215;   // Dating
  IAB14_2 = 216;   // Divorce Support
  IAB14_3 = 217;   // Gay Life
  IAB14_4 = 218;   // Marriage
  IAB14_5 = 219;   // Senior Living
  IAB14_6 = 220;   // Teens
  IAB14_7 = 221;   // Weddings
  IAB14_8 = 222;   // Ethnic Specific
  IAB15  =  223;   // Science
  IAB15_1 = 224;   // Astrology
  IAB15_2 = 225;   // Biology
  IAB15_3 = 226;   // Chemistry
  IAB15_4 = 227;   // Geology
  IAB15_5 = 228;   // Paranormal Phenomena
  IAB15_6 = 229;   // Physics
  IAB15_7 = 230;   // Space/Astronomy
  IAB15_8 = 231;   // Geography
  IAB15_9 = 232;   // Botany
  IAB15_10 = 233;  // Weather
  IAB16 = 234;     // Pets
  IAB16_1 = 235;   // Aquariums
  IAB16_2 = 236;   // Birds
  IAB16_3 = 237;   // Cats
  IAB16_4 = 238;   // Dogs
  IAB16_5 = 239;   // Large Animals
  IAB16_6 = 240;   // Reptiles
  IAB16_7 = 241;   // Veterinary Medicine
  IAB17 = 242;     // Sports
  IAB17_1 = 243;   // Auto Racing
  IAB17_2 = 244;   // Baseball
  IAB17_3 = 245;   // Bicycling
  IAB17_4 = 246;   // Bodybuilding
  IAB17_5 = 247;   // Boxing
  IAB17_6 = 248;   // Canoeing/Kayaking
  IAB17_7 = 249;   // Cheerleading
  IAB17_8 = 250;   // Climbing
  IAB17_9 = 251;   // Cricket
  IAB17_10 = 252;  // Figure Skating
  IAB17_11 = 253;  // Fly Fishing
  IAB17_12 = 254;  // Football
  IAB17_13 = 255;  // Freshwater Fishing
  IAB17_14 = 256;  // Game & Fish
  IAB17_15 = 257;  // Golf
  IAB17_16 = 258;  // Horse Racing
  IAB17_17 = 259;  // Horses
  IAB17_18 = 260;  // Hunting/Shooting
  IAB17_19 = 261;  // Inline  Skating
  IAB17_20 = 262;  // Martial Arts
  IAB17_21 = 263;  // Mountain Biking
  IAB17_22 = 264;  // NASCAR Racing
  IAB17_23 = 265;  // Olympics
  IAB17_24 = 266;  // Paintball
  IAB17_25 = 267;  // Power & Motorcycles
  IAB17_26 = 268;  // Pro Basketball
  IAB17_27 = 269;  // Pro Ice Hockey
  IAB17_28 = 270;  // Rodeo
  IAB17_29 = 271;  // Rugby
  IAB17_30 = 272;  // Running/Jogging
  IAB17_31 = 273;  // Sailing
  IAB17_32 = 274;  // Saltwater Fishing
  IAB17_33 = 275;  // Scuba Diving
  IAB17_34 = 276;  // Skateboarding
  IAB17_35 = 277;  // Skiing
  IAB17_36 = 278;  // Snowboarding
  IAB17_37 = 279;  // Surfing/Bodyboarding
  IAB17_38 = 280;  // Swimming
  IAB17_39 = 281;  // Table Tennis/Ping-Pong
  IAB17_40 = 282;  // Tennis
  IAB17_41 = 283;  // Volleyball
  IAB17_42 = 284;  // Walking
  IAB17_43 = 285;  // Waterski/Wakeboard
  IAB17_44 = 286;  // World Soccer
  IAB18 = 287;     // Style & Fashion
  IAB18_1 = 288;   // Beauty
  IAB18_2 = 289;   // Body Art
  IAB18_3 = 290;   // Fashion
  IAB18_4 = 291;   // Jewelry
  IAB18_5 = 292;   // Clothing
  IAB18_6 = 293;   // Accessories
  IAB19 = 294;     // Technology & Computing
  IAB19_1 = 295;   // 3-D Graphics
  IAB19_2 = 296;   // Animation
  IAB19_3 = 297;   // Antivirus Software
  IAB19_4 = 298;   // C/C++
  IAB19_5 = 299;   // Cameras & Camcorders
  IAB19_6 = 300;   // Cell  Phones
  IAB19_7 = 301;   // Computer Certification
  IAB19_8 = 302;   // Computer Networking
  IAB19_9 = 303;   // Computer Peripherals
  IAB19_10 = 304;  // Computer Reviews
  IAB19_11 = 305;  // Data Centers
  IAB19_12 = 306;  // Databases
  IAB19_13 = 307;  // Desktop Publishing
  IAB19_14 = 308;  // Desktop Video
  IAB19_15 = 309;  // Email
  IAB19_16 = 310;  // Graphics Software
  IAB19_17 = 311;  // Home Video/DVD
  IAB19_18 = 312;  // Internet Technology
  IAB19_19 = 313;  // Java
  IAB19_20 = 314;  // Javascript
  IAB19_21 = 315;  // Mac Support
  IAB19_22 = 316;  // MP3/MIDI
  IAB19_23 = 317;  // Net Conferencing
  IAB19_24 = 318;  // Net for Beginners
  IAB19_25 = 319;  // Network Security
  IAB19_26 = 320;  // Palmtops/PDAs
  IAB19_27 = 321;  // PC Support
  IAB19_28 = 322;  // Portable
  IAB19_29 = 323;  // Entertainment
  IAB19_30 = 324;  // Shareware/Freeware
  IAB19_31 = 325;  // Unix
  IAB19_32 = 326;  // Visual Basic
  IAB19_33 = 327;  // Web Clip Art
  IAB19_34 = 328;  // Web Design/HTML
  IAB19_35 = 329;  // Web Search
  IAB19_36 = 330;  // Windows
  IAB20 = 331;     // Travel
  IAB20_1 = 332;   // Adventure Travel
  IAB20_2 = 333;   // Africa
  IAB20_3 = 334;   // Air Travel
  IAB20_4 = 335;   // Australia & New Zealand
  IAB20_5 = 336;   // Bed & Breakfasts
  IAB20_6 = 337;   // Budget Travel
  IAB20_7 = 338;   // Business Travel
  IAB20_8 = 339;   // By US Locale
  IAB20_9 = 340;   // Camping
  IAB20_10 = 341;  // Canada
  IAB20_11 = 342;  // Caribbean
  IAB20_12 = 343;  // Cruises
  IAB20_13 = 344;  // Eastern  Europe
  IAB20_14 = 345;  // Europe
  IAB20_15 = 346;  // France
  IAB20_16 = 347;  // Greece
  IAB20_17 = 348;  // Honeymoons/Getaways
  IAB20_18 = 349;  // Hotels
  IAB20_19 = 350;  // Italy
  IAB20_20 = 351;  // Japan
  IAB20_21 = 352;  // Mexico & Central America
  IAB20_22 = 353;  // National Parks
  IAB20_23 = 354;  // South America
  IAB20_24 = 355;  // Spas
  IAB20_25 = 356;  // Theme Parks
  IAB20_26 = 357;  // Traveling with Kids
  IAB20_27 = 358;  // United Kingdom
  IAB21 = 359;     // Real Estate
  IAB21_1 = 360;   // Apartments
  IAB21_2 = 361;   // Architects
  IAB21_3 = 362;   // Buying/Selling Homes
  IAB22 = 363;     // Shopping
  IAB22_1 = 364;   // Contests & Freebies
  IAB22_2 = 365;   // Couponing
  IAB22_3 = 366;   // Comparison
  IAB22_4 = 367;   // Engines
  IAB23 = 368;     // Religion & Spirituality
  IAB23_1 = 369;   // Alternative Religions
  IAB23_2 = 370;   // Atheism/Agnosticism
  IAB23_3 = 371;   // Buddhism
  IAB23_4 = 372;   // Catholicism
  IAB23_5 = 373;   // Christianity
  IAB23_6 = 374;   // Hinduism
  IAB23_7 = 375;   // Islam
  IAB23_8 = 376;   // Judaism
  IAB23_9 = 377;   // Latter-Day Saints
  IAB23_10 = 378;  // Paga/Wiccan
  IAB24 = 379;     // Uncategorized
  IAB25 = 380;     // Non-Standard Content
  IAB25_1 = 381;   // Unmoderated UGC
  IAB25_2 = 382;   // Extreme Graphic/Explicit Violence
  IAB25_3 = 383;   // Pornography
  IAB25_4 = 384;   // Profane Content
  IAB25_5 = 385;   // Hate Content
  IAB25_6 = 386;   // Under Construction
  IAB25_7 = 387;   // Incentivized
  IAB26 = 388;     // Illegal Content
  IAB26_1 = 389;   // Illegal Content
  IAB26_2 = 390;   // Warez
  IAB26_3 = 391;   // Spyware/Malware
  IAB26_4 = 392;   // Copyright Infringement
}

/*
 * OpenRTB 6.3: creative attributes that can describe an ad being served
 * or serve as restrictions of thereof.
 */
enum CreativeAttribute {
  AUDIO_AUTO_PLAY = 1;
  AUDIO_USER_INITIATED = 2;
  EXPANDABLE_AUTOMATIC = 3;
  EXPANDABLE_CLICK_INITIATED = 4;
  EXPANDABLE_ROLLOVER_INITIATED = 5;
  VIDEO_IN_BANNER_AUTO_PLAY = 6;
  VIDEO_IN_BANNER_USER_INITIATED = 7;
  POP_UP = 8;
  PROVOCATIVE_OR_SUGGESTIVE = 9;
  ANNOYING = 10;
  SURVEYS = 11;
  TEXT_ONLY = 12;
  USER_INTERACTIVE = 13;
  WINDOWS_DIALOG_OR_ALERT_STYLE = 14;
  HAS_AUDIO_ON_OFF_BUTTON = 15;
  AD_CAN_BE_SKIPPED = 16;
}

/*
 * OpenRTB 3.3.1: The top-level bid request object.
 */
message BidRequest {
  /*
   * Unique ID of the bid request, provided by the exchange.
   */
  required string id = 1;
  /*
   * Multiple impression auctions may be specified in a single bid request.
   * At least one impression is required for a valid bid request.
   */
  repeated Impression imp = 2;
  /*
   * Information pertaining to a website.
   */
  optional Site site = 3;
  /*
   * Information pertaining to a mobile application.
   */
  optional App app = 4;
  /*
   * Information pertaining to the device.
   */
  optional Device device = 5;
  /*
   * Information known or derived about the human user of the device.
   */
  optional User user = 6;
  /**
   * Indicator of test mode in which auctions are not billable,
   * where false = live mode, true = test mode.
   */
  optional bool test = 15;
  /*
   * Auction Type. If “1”, then first price auction. If “2”, then second price auction.
   * Additional auction types can be defined as per the exchange’s business rules.
   * Exchange specific rules should be numbered over 500.
   */
  optional int32 at = 7 [default = 2];
  /*
   * Maximum amount of time in milliseconds to submit a bid (e.g., 120 means the bidder
   * has 120ms to submit a bid before the auction is complete). If this value never changes
   * across an exchange, then the exchange can supply this information offline.
   */
  optional int32 tmax = 8;
  /*
   * Array of buyer seats allowed to bid on this auction. Seats are an optional feature of exchange.
   * For example, [“4”,”34”,”82”,”A45”] indicates that only advertisers using these exchange seats
   * are allowed to bid on the impressions in this auction.
   */
  repeated string wseat = 9;
  /*
   * Flag to indicate whether Exchange can verify that all impressions offered represent all
   * of the impressions available in context (e.g., all impressions available on the web page;
   * all impressions available for a video [pre, mid and postroll spots], etc.)
   * to support road-blocking. A true value should only be passed if the exchange is aware of all
   * impressions in context for the publisher. False means the exchange cannot verify, and true
   * means that all impressions represent all impressions available.
   */
  optional bool allimps = 10;
  /*
   * Array of allowed currencies for bids on this bid request using ISO-4217 alphabetic codes.
   * If only one currency is used by the exchange, this parameter is not required.
   */
  repeated string cur = 11;
  /*
   * Blocked Advertiser Categories. Note that there is no existing categorization / taxonomy of
   * advertiser industries. However, as a substitute exchanges may decide to use IAB categories
   * as an approximation.
   */
  repeated string bcat = 12;
  /*
   * Array of strings of blocked top-level domains of advertisers.
   * For example, {“company1.com”, “company2.com”}.
   */
  repeated string badv = 13;
  /*
   * Container for any legal, governmental or industry regulations in force for the request.
   */
  optional Regulations regs = 14;
  /**
   * Extensions.
   */
  extensions 100 to 199;

  /*
   * OpenRTB 3.3.2: describes the ad position or impression being auctioned.
   * A single bid request can include multiple “imp” objects, a use case for which might be an
   * exchange that supports selling all ad positions on a given page as a bundle.
   * Each “imp” object has a required ID so that bids can reference them individually.
   * An exchange can also conduct private auctions by restricting involvement to specific
   * subsets of seats within bidders.
   */
  message Impression {
    /*
     * A unique identifier for this impression within the context of the bid request
     * (typically, value starts with 1, and increments up to n for n impressions).
     */
    required string id = 1;
    /*
     * A Banner object; required if this impression is offered as a banner ad opportunity.
     */
    optional Banner banner = 2;
    /*
     * A Video object; required if this impression is offered as a video ad opportunity.
     */
    optional Video video = 3;
    /**
     * A Native object; required if this impression is offered as a native ad opportunity.
     */
    optional Native native = 13;
    /*
     * Name of ad mediation partner, SDK technology, or native player responsible for rendering
     * ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
     */
    optional string displaymanager = 4;
    /*
     * Version of ad mediation partner, SDK technology, or native player responsible for rendering
     * ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
     */
    optional string displaymanagerver = 5;
    /*
     * YES if the ad is interstitial or full screen; else NO.
     */
    optional bool instl = 6;
    /*
     * Identifier for specific ad placement or ad tag that was used to initiate the auction.
     * This can be useful for debugging of any issues, or for optimization by the buyer.
     */
    optional string tagid = 7;
    /*
     * Bid floor for this impression (in CPM of bidfloorcur).
     */
    optional int64 bidfloor = 8 [default = 0];
    /*
     * If bid floor is specified and multiple currencies supported per bid request,
     * then currency should be specified here using ISO-4217 alphabetic codes.
     * Note, this may be different from bid currency returned by bidder,
     * if this is allowed on an exchange.
     */
    optional string bidfloorcur = 9 [default = "USD"];
    /**
     * Flag to indicate if the impression requires secure HTTPS URL
     * creative assets and markup, where false = non-secure, true = secure.
     * If omitted, the secure state is unknown, but non-secure HTTP
     * support can be assumed.
     */
    optional bool secure = 12;
    /*
     * Array of names for supported iframe busters. Exchange specific.
     */
    repeated string iframebuster = 10;
    /*
     * Contains any Deals eligible for this Impression.
     */
    optional PMP pmp = 11;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 6.4: API frameworks.
     */
    enum ApiFramework {
      VPAID_1_0 = 1;
      VPAID_2_0 = 2;
      MRAID_1 = 3;
      ORMMA = 4;
      MRAID_2 = 5;
    }

    /*
     * OpenRTB 6.5: the position of the ad as a relative measure of visibility or prominence.
     */
    enum AdPosition {
      POSITION_UNKNOWN = 0;
      ABOVE_THE_FOLD = 1;
      DEPRECATED_MAYBE_VISIBLE = 2;
      BELOW_THE_FOLD = 3;
      HEADER = 4;
      FOOTER = 5;
      SIDEBAR = 6;
      FULLSCREEN = 7;
    }

    /*
     * OpenRTB 3.3.3: A banner object typically describes an ad impressions opportunity for banner,
     * rich media or in-banner video inventory.
     */
    message Banner {
      /*
       * Width of the impression in pixels. Since some ad types are not restricted by size
       * this field is not required, but it’s highly recommended.
       */
      optional int32 w = 1;
      /*
       * Height of the impression in pixels. Since some ad types are not restricted by size
       * this field is not required, but it’s highly recommended.
       */
      optional int32 h = 2;
      /**
       * Maximum width of the impression in pixels. If included, it indicates that a range
       * of sizes is allowed with this maximum width and "w" is taken as recommended.
       * If not included, then "w" should be considered an exact requirement.
       */
      optional int32 wmax = 11;
      /**
       * Maximum height of the impression in pixels. If included, it indicates that a range
       * of sizes is allowed with this maximum height and "h" is taken as recommended.
       * If not included, then "h" should be considered an exact requirement.
       */
      optional int32 hmax = 12;
      /**
       * Minimum width of the impression in pixels. If included, it indicates that a range
       * of sizes is allowed with this minimum width and "w" is taken as recommended.
       * If not included, then "w" should be considered an exact requirement.
       */
      optional int32 wmin = 13;
      /**
       * Minumum height of the impression in pixels. If included, it indicates that a range
       * of sizes is allowed with this minimum height and "h" is taken as recommended.
       * If not included, then "h" should be considered an exact requirement.
       */
      optional int32 hmin = 14;
      /*
       * Unique identifier for this banner object. Useful for tracking multiple banner objects
       * (e.g., in companion banner array). Usually starts with 1, increasing with each object.
       * Combination of impression id X banner id should be unique.
       */
      optional string id = 3;
      /*
       * Blocked creative types. If blank, assume all types are allowed.
       */
      repeated AdType btype = 5;
      /*
       * Blocked creative attributes. If blank assume all types are allowed.
       */
      repeated CreativeAttribute battr = 6;
      /*
       * The position of the ad as a relative measure of visibility or prominence.
       */
      optional AdPosition pos = 4 [default = POSITION_UNKNOWN];
      /*
       * Whitelist of content MIME types supported. Popular MIME types include,
       * but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
       */
      repeated string mimes = 7;
      /*
       * Specify if the banner is delivered in the top frame (true) or in an iframe (false).
       */
      optional bool topframe = 8;
      /*
       * Specify properties for an expandable ad.
       */
      repeated ExpandableDirection expdir = 9;
      /*
       * List of supported API frameworks for this banner. If an API is not explicitly listed
       * it is assumed not to be supported.
       */
      repeated ApiFramework api = 10;
      /**
       * Extensions.
       */
      extensions 100 to 199;

      /*
       * OpenRTB 6.2: types of ads that can be accepted by the exchange unless
       * restricted by publisher site settings.
       */
      enum AdType {
        /*
         * "Usually mobile".
         */
        XHTML_TEXT = 1;
        /*
         * "Usually mobile".
         */
        XHTML_BANNER = 2;
        /*
         * Javascript must be valid XHTML (ie, script tags included).
         */
        JAVASCRIPT = 3;
        /*
         * Iframe.
         */
        IFRAME = 4;
      }

      /*
       * OpenRTB 6.11: the directions in which an expandable ad may expand, given the
       * positioning of the ad unit on the page and constraints imposed by the content.
       */
      enum ExpandableDirection {
        LEFT = 1;
        RIGHT = 2;
        UP = 3;
        DOWN = 4;
        FULLSCREEN = 5;
      }
    }

    /*
     * OpenRTB 3.3.4: A video object typically describes an ad opportunity for in-stream video
     * inventory (including linear pre-roll, mid-roll and post-roll, and non-linear overlays).
     * Please note, in-banner video is typically represented by the banner object.
     */
    message Video {
      /*
       * Whitelist of content MIME types supported. Popular MIME types include,
       * but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
       */
      repeated string mimes = 1;
      /*
       * Minimum video ad duration in seconds.
       */
      required int32 minduration = 3;
      /*
       * Maximum video ad duration in seconds.
       */
      required int32 maxduration = 4;
      /*
       * Video bid response protocols.
       */
      optional Protocol deprecated_protocol = 5;
      /*
       * Video bid response protocols.
       */
      repeated Protocol protocols = 21;
      /*
       * Width of the player in pixels. This field is not required, but it’s highly recommended.
       */
      optional int32 w = 6;
      /*
       * Height of the player in pixels. This field is not required, but it’s highly recommended.
       */
      optional int32 h = 7;
      /*
       * Indicates the start delay in seconds for preroll, midroll, or postroll ad placement.
       * Check the enum VideoStartDelay for special values.
       */
      optional int32 startdelay = 8;
      /*
       * Indicates whether the ad impression is linear or non-linear.
       */
      required Linearity linearity = 2;
      /*
       * If multiple ad impressions are offered in the same bid request, the sequence number
       * will allow for the coordinated delivery of multiple creatives.
       */
      optional int32 sequence = 9 [default = 1];
      /*
       * Blocked creative attributes. If blank assume all types are allowed.
       */
      repeated CreativeAttribute battr = 10;
      /*
       * Maximum extended video ad duration, if extension is allowed.
       * If blank or 0, extension is not allowed. If -1, extension is allowed, and there is
       * no time limit imposed. If greater than 0, then the value represents the number of
       * seconds of extended play supported beyond the maxduration value.
       */
      optional int32 maxextended = 11 [default = 0];
      /*
       * Minimum bit rate in Kbps. Exchange may set this dynamically,
       * or universally across their set of publishers.
       */
      optional int32 minbitrate = 12;
      /*
       * Maximum bit rate in Kbps. Exchange may set this dynamically,
       * or universally across their set of publishers.
       */
      optional int32 maxbitrate = 13;
      /*
       * If exchange publisher has rules preventing letter boxing of 4x3 content to play in a
       * 16x9 window, then this should be set to false. Default setting is true, which assumes
       * that boxing of content to fit into a window is allowed.
       */
      optional bool boxingallowed = 14 [default = true];
      /*
       * List of allowed playback methods. If blank, assume that all are allowed.
       */
      repeated PlaybackMethod playbackmethod = 15;
      /*
       * List of supported delivery methods. If blank, assume all are supported.
       */
      repeated ContentDelivery delivery = 16;
      /*
       * The position of the ad as a relative measure of visibility or prominence.
       */
      optional AdPosition pos = 17 [default = POSITION_UNKNOWN];
      /*
       * If companion ads are available, they can be listed as an array of banner objects.
       */
      repeated Banner companionad = 18;
      /*
       * List of supported API frameworks for this banner. If an API is not explicitly listed
       * it is assumed not to be supported.
       */
      repeated ApiFramework api = 19;
      /*
       * Recommended if companion objects are included.
       */
      repeated CompanionType companiontype = 20;
      /**
       * Extensions.
       */
      extensions 100 to 199;

      /*
       * OpenRTB 6.6: "In-stream" or "linear" video refers to pre-roll, post-roll, or mid-roll
       * video ads where the user is forced to watch ad in order to see the video content.
       * “Overlay” or “non-linear” refer to ads that are shown on top of the video content.
       * This OpenRTB table has values derived from the IAB Quality Assurance Guidelines (QAG).
       */
      enum Linearity {
        LINEAR = 1;
        NON_LINEAR = 2;
      }

      /*
       * OpenRTB 6.7: video bid response protocols that could be supported by an exchange.
       */
      enum Protocol {
        VAST_1_0 = 1;
        VAST_2_0 = 2;
        VAST_3_0 = 3;
        VAST_1_0_WRAPPER = 4;
        VAST_2_0_WRAPPER = 5;
        VAST_3_0_WRAPPER = 6;
      }

      /*
       * OpenRTB 6.8: video playback methods.
       */
      enum PlaybackMethod {
        AUTOPLAY_SOUND_ON = 1;
        AUTOPLAY_SOUND_OFF = 2;
        CLICK_TO_PLAY = 3;
        MOUSE_OVER = 4;
      }

      /**
       * OpenRTB 6.9: Various options for the video start delay. If the start delay value
       * is greater than 0 then the position is mid-roll, and the value represents the number
       * of seconds into the content that the ad will be displayed. If the start delay time
       * is not available, the exchange can report the position of the ad in general terms
       * using this table of negative numbers.
       */
      enum VideoStartDelay {
        PRE_ROLL = 0;
        GENERIC_MID_ROLL = -1;
        GENERIC_POST_ROLL = -2;
      }

      /*
       * OpenRTB 6.12: delivery of video content.
       */
      enum ContentDelivery {
        STREAMING = 1;
        PROGRESSIVE = 2;
      }

      /*
       * OpenRTB 6.17: markup types allowed for video companion ads.
       * This table is derived from IAB VAST 2.0+. See www.iab.net/vast/ for more information.
       */
      enum CompanionType {
        STATIC = 1;
        HTML = 2;
        IFRAME = 3;
      }
    }

    /**
     * OpenRTB 3.2.5: This object represents a native type impression.
     * Native ad units are intended to blend seamlessly into the surrounding content
     * (e.g., a sponsored Twitter or Facebook post). As such, the response must be
     * well-structured to afford the publisher fine-grained control over rendering.
     * The Native Subcommittee has developed a companion specification to OpenRTB
     * called the Native Ad Specification. It defines the request parameters and response markup
     * structure of native ad units. This object provides the means of transporting request
     * parameters as an opaque string so that the specific parameters can evolve separately
     * under the auspices of the Native Ad Specification.
     * Similarly, the ad markup served will be structured according to that specification.
     * The presence of a Native as a subordinate of the Imp object indicates that this
     * impression is offered as a native type impression. At the publisher’s discretion,
     * that same impression may also be offered as banner and/or video by also including as
     * Imp subordinates the Banner and/or Video objects, respectively.
     * However, any given bid for the impression must conform to one of the offered types.
     */
    message Native {
      /**
       * Request payload complying with the Native Ad Specification.
       */
      required NativeRequest request = 1;
      /**
       * Version of the Native Ad Specification to which request complies;
       * highly recommended for efficient parsing.
       */
      required string ver = 2;
      /**
       * List of supported API frameworks for this impression.
       * If an API is not explicitly listed, it is assumed not to be supported.
       */
      repeated ApiFramework api = 3;
      /**
       * Blocked creative attributes.
       */
      repeated CreativeAttribute battr = 4;
      /**
       * Extensions.
       */
      extensions 100 to 199;
    }

    /*
     * OpenRTB 3.3.16: contains a parent object for usage within the context of private
     * marketplaces and the use of the RTB protocol to execute Direct Deals.
     */
    message PMP {
      /*
       * Flag indicating that this impression is a private auction eligible only to seats named
       * in the Deal object.
       */
      optional bool private_auction = 1;
      /*
       * A collection of deal objects encapsulating a list of direct deals eligible for
       * this impression.
       */
      repeated Deal deals = 2;
      /**
       * Extensions.
       */
      extensions 100 to 199;

      /*
       * OpenRTB 3.3.17: constitutes a deal struck a priori between a buyer and a seller and
       * indicates that this impression is available under the terms of that deal.
       */
      message Deal {
        /*
         * A unique identifier for the direct deal.
         */
        required string id = 1;
        /*
         * Bid floor for this impression (in CPM of bidfloorcur).
         */
        optional int64 bidfloor = 2 [default = 0];
        /*
         * If bid floor is specified and multiple currencies supported per bid request,
         * then currency should be specified here using ISO-4217 alphabetic codes. Notes.
         * this may be different from bid currency returned by bidder, if this is allowed
         * on an exchange.
         */
        optional string bidfloorcur = 3 [default = "USD"];
         /*
          * Array of buyer seats allowed to bid on this auction. Seats are an optional feature
          * of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only advertisers
          * using these exchange seats are allowed to bid on the impressions in this auction.
          */
        repeated string wseat = 4;
        /*
         * Array of advertiser domains allowed to bid on this Direct Deal. For example,
         * [ "advertiser1.com", "advertiser2.com" ] indicates that only the listed
         * advertisers are allowed to bid on this direct deal.
         */
        repeated string wadomain = 5;
        /*
         * Auction Type. If “1”, then first price auction. If “2”, then second price auction.
         * Additional auction types can be defined as per the exchange’s business rules.
         */
        optional int32 at = 6;
        /**
         * Extensions.
         */
        extensions 100 to 199;
      }
    }
  }

  /*
   * OpenRTB 3.3.5: should be included if the ad supported content is part of a website
   * (as opposed to an application).
   */
  message Site {
    /*
     * Site ID on the exchange.
     */
    optional string id = 1;
    /*
     * Site name (may be masked at publisher’s request).
     */
    optional string name = 2;
    /*
     * Domain of the site, used for advertiser side blocking. For example, “foo.com”.
     */
    optional string domain = 3;
    /*
     * Array of IAB content categories for the overall site.
     */
    repeated string cat = 4;
    /*
     * Array of IAB content categories for the current subsection of the site.
     */
    repeated string sectioncat = 5;
    /*
     * Array of IAB content categories for the current page.
     */
    repeated string pagecat = 6;
    /*
     * URL of the page where the impression will be shown.
     */
    optional string page = 7;
    /*
     * Referrer URL that caused navigation to the current page.
     */
    optional string ref = 10;
    /*
     * Search string that caused navigation to the current page.
     */
    optional string search = 11;
    /**
     * Mobile-optimized signal.
     */
    optional bool mobile = 15;
    /*
     * Specifies whether the site has a privacy policy.
     */
    optional bool privacypolicy = 8;
    /*
     * Site's Publisher.
     */
    optional Publisher publisher = 12;
    /*
     * Site's Content.
     */
    optional Content content = 13;
    /*
     * List of keywords describing this site in a comma separated string.
     */
    optional string keywords = 14;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }

  /*
   * OpenRTB 3.3.6: should be included if the ad supported content is part of a mobile application
   * (as opposed to a mobile website).
   */
  message App {
    /*
     * Application ID on the exchange.
     */
    optional string id = 1;
    /*
     * Application name (may be masked at publisher’s request).
     */
    optional string name = 2;
    /*
     * Application bundle or package name (e.g., com.foo.mygame). This is intended to be a
     * unique ID across multiple exchanges.
     */
    optional string bundle = 8;
    /*
     * Domain of the application. For example, “mygame.foo.com”.
     */
    optional string domain = 3;
    /*
     * For QAG 1.5 compliance, an app store URL for an installed app
     * should be passed in the bid request.
     */
    optional string storeurl = 14;
    /*
     * Array of IAB content categories for the overall application.
     */
    repeated string cat = 4;
    /*
     * Array of IAB content categories for the current subsection of the application.
     */
    repeated string sectioncat = 5;
    /*
     * Array of IAB content categories for the current page/view of the app.
     */
    repeated string pagecat = 6;
    /*
     * Application version.
     */
    optional string ver = 7;
    /*
     * Specifies whether the application has a privacy policy.
     */
    optional bool privacypolicy = 9;
    /*
     * Application is a paid version or free.
     */
    optional bool paid = 10;
    /*
     * Application's Publisher.
     */
    optional Publisher publisher = 11;
    /*
     * Application's Content.
     */
    optional Content content = 12;
    /*
     * List of keywords describing this site in a comma separated string.
     */
    optional string keywords = 13;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }

  /*
   * OpenRTB 3.3.7: describes the content of a site or app.
   * This object may be useful in the situation where syndicated content contains impressions and
   * does not necessarily match the publisher’s general content. The exchange might or might not
   * have knowledge of the page where the content is running, as a result of the syndication method.
   * (For example, video impressions embedded in an iframe on an unknown web property or device.)
   */
  message Content {
    /*
     * OpenRTB 6.13: Options for the content context; what type of content is it.
     */
    enum Context {
      VIDEO = 1;
      GAME = 2;
      MUSIC = 3;
      APPLICATION = 4;
      TEXT = 5;
      OTHER = 6;
      CONTEXT_UNKNOWN = 7;
    }

    /*
     * ID uniquely identifying the content.
     */
    optional string id = 1;
    /*
     * Content episode number (typically applies to video content).
     */
    optional int32 episode = 2;
    /*
     * Content title.
     */
    optional string title = 3;
    /*
     * Content series.
     */
    optional string series = 4;
    /*
     * Content season.
     */
    optional string season = 5;
    /*
     * Content's Producer.
     */
    optional Producer producer = 15;
    /*
     * Original URL of the content, for buy-side contextualization or review.
     */
    optional string url = 6;
    /*
     * Array of IAB content categories for the content.
     */
    repeated string cat = 7;
    /*
     * Video quality per the IAB’s classification.
     */
    optional VideoQuality videoquality = 8;
    /*
     * Specifies the type of content (game, video, text, etc.).
     */
    optional Context context = 12;
    /*
     * Content rating (e.g., MPAA).
     */
    optional string contentrating = 10;
    /*
     * User rating of the content (e.g., number of stars, likes, etc.).
     */
    optional string userrating = 11;
    /*
     * Media rating of the content, per QAG guidelines.
     */
    optional QAGMediaRating qagmediarating = 17;
    /*
     * Comma separated list of keywords describing the content.
     */
    optional string keywords = 9;
    /*
     * Is content live?
     */
    optional bool livestream = 13;
    /*
     * Direct or indirect.
     */
    optional SourceRelationship sourcerelationship = 14;
    /*
     * Length of content (appropriate for video or audio) in seconds.
     */
    optional int32 len = 16;
    /*
     * Language of the content. Use alpha-2/ISO 639-1 codes.
     */
    optional string language = 19;
    /*
     * From QAG Video Addendum. If content can be embedded (such as an embeddable video player)
     * this value should be set to YES. If content cannot be embedded, this should be set to NO.
     */
    optional bool embeddable = 18;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 6.14: video quality.
     * See http://www.iab.net/media/file/long-form-video-final.pdf
     */
    enum VideoQuality {
      QUALITY_UNKNOWN = 0;
      PROFESSIONAL = 1;
      PROSUMER = 2;
      USER_GENERATED = 3;
    }

    /*
     * OpenRTB 6.18: media ratings using the QAG categorization.
     * See http://www.iab.net/ne_guidelines
     */
    enum QAGMediaRating {
      ALL_AUDIENCES = 1;
      EVERYONE_12 = 2;
      MATURE = 3;
    }

    enum SourceRelationship {
      INDIRECT = 0;
      DIRECT = 1;
    }
  }

  /*
   * OpenRTB 3.3.10: Provides information pertaining to the device including its hardware,
   * platform, location, and carrier. This device can refer to a mobile handset, a desktop
   * computer, set top box or other digital device. In general, the most essential fields are
   * either the IP address (to enable geo-lookup for the bidder), or providing geo information
   * directly in the geo object.
   */
  message Device {
    /*
     * Browser user agent string.
     */
    optional string ua = 2;
    /*
     * Geography as derived from the device’s location services (e.g., cell tower triangulation,
     * GPS) or IP address.
     */
    optional Geo geo = 4;
    /*
     * Do Not Track.
     */
    optional bool dnt = 1;
    /**
     * "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
     * where false = tracking is unrestricted,
     * true = tracking must be limited per commercial guidelines.
     */
    optional bool lmt = 20;
    /*
     * IPv4 address closest to device.
     */
    optional string ip = 3;
    /*
     * IP address in IPv6.
     */
    optional string ipv6 = 9;
    /*
     * Return the device type being used.
     */
    optional DeviceType devicetype = 18;
    /*
     * Device make (e.g., “Apple”).
     */
    optional string make = 12;
    /*
     * Device model (e.g., “iPhone”).
     */
    optional string model = 13;
    /*
     * Device operating system (e.g., “iOS”).
     */
    optional string os = 14;
    /*
     * Device operating system version (e.g., “3.1.2”).
     */
    optional string osv = 15;
    /**
     * Hardware version of the device (e.g., "5S" for iPhone 5S).
     */
    optional string hwv = 21;
    /**
     * Physical width of the screen in pixels.
     */
    optional int32 w = 22;
    /**
     * Physical height of the screen in pixels.
     */
    optional int32 h = 23;
    /**
     * Screen size as pixels per linear inch.
     */
    optional int32 ppi = 24;
    /**
     * The ratio of physical pixels to device independent pixels.
     */
    optional double pxratio = 25;
    /*
     * Device supports Javascript?
     */
    optional bool js = 16;
    /*
     * Return the Flash version detected.
     */
    optional string flashver = 19;
    /*
     * Browser language; use alpha-2/ISO 639-1 codes.
     */
    optional string language = 11;
    /*
     * Carrier or ISP, e.g. "VERIZON", specified using Mobile Network Code (MNC).
     * "WIFI" is often used in mobile to indicate high bandwidth
     * (e.g., video friendly vs. cellular).
     */
    optional string carrier = 10;
    /*
     * Return the detected data connection type for the device.
     */
    optional ConnectionType connectiontype = 17;
    /**
     * ID sanctioned for advertiser use in the clear (i.e., not hashed).
     */
    optional string ifa = 26;
    /*
     * SHA1 hashed device ID; IMEI when available, else MEID or ESN.
     * OpenRTB’s preferred method for device ID hashing is SHA1.
     */
    optional string didsha1 = 5;
    /*
     * MD5 hashed device ID; IMEI when available, else MEID or ESN.
     * Should be interpreted as case insensitive.
     */
    optional string didmd5 = 6;
    /*
     * SHA1 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
     * OpenRTB’s preferred method for device ID hash is SHA1.
     */
    optional string dpidsha1 = 7;
    /*
     * MD5 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
     * Should be interpreted as case insensitive.
     */
    optional string dpidmd5 = 8;
    /**
     * MAC address of the device; hashed via SHA1.
     */
    optional string macsha1 = 27;
    /**
     * MAC address of the device; hashed via MD5.
     */
    optional string macmd5 = 28;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 6.10: connection type.
     */
    enum ConnectionType {
      CONNECTION_UNKNOWN = 0;
      ETHERNET = 1;
      WIFI = 2;
      CELL_UNKNOWN = 3;
      CELL_2G = 4;
      CELL_3G = 5;
      CELL_4G = 6;
    }

    /*
     * OpenRTB 6.16: how the geographic information was determined.
     * This OpenRTB table has values derived from the IAB Quality Assurance Guidelines (QAG).
     */
    enum DeviceType {
      MOBILE = 1;
      PC = 2;
      CONNECTED_TV = 3;
    }
  }

  /*
   * OpenRTB 3.3.12: contains information known or derived about the human user of the device.
   * Note that the user ID is an exchange artifact (refer to the “device” object for hardware or
   * platform derived IDs) and may be subject to rotation policies. However, this user ID must be
   * stable long enough to serve reasonably as the basis for frequency capping.
   * If device ID is used as a proxy for unique user ID, use the device object.
   */
  message User {
    /*
     * Unique consumer ID of this user on the exchange.
     */
    optional string id = 1;
    /*
     * Buyer’s user ID for this user as mapped by exchange for the buyer.
     */
    optional string buyeruid = 2;
    /*
     * Year of birth as a 4-digit integer.
     */
    optional int32 yob = 3;
    /*
     * Gender as “M” male, “F” female, “O” Other. (Null indicates unknown)
     */
    optional string gender = 4;
    /*
     * Comma separated list of keywords of consumer interests or intent.
     */
    optional string keywords = 5;
    /*
     * If supported by the exchange, this is custom data that the bidder had stored in the
     * exchange’s cookie. The string may be in base85 cookie safe characters, and be in any
     * format. This may useful for storing user features. Note: Proper JSON encoding must
     * be used to include “escaped” quotation marks.
     */
    optional string customdata = 6;
    /*
     * Home geo for the user (e.g., based off of registration data); this is different from the
     * current location of the access device (that is defined by the geo object embedded in the
     * Device Object).
     */
    optional Geo geo = 7;
    /*
     * User's custom Data.
     */
    repeated Data data = 8;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }

  /*
   * OpenRTB 3.3.8: describes the publisher of a site or app.
   */
  message Publisher {
    /*
     * Publisher ID on the exchange.
     */
    optional string id = 1;
    /*
     * Publisher name (may be masked at publisher’s request).
     */
    optional string name = 2;
    /*
     * Array of IAB content categories for the publisher.
     */
    repeated string cat = 3;
    /*
     * Publisher’s highest level domain name, for example “foopub.com”.
     */
    optional string domain = 4;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }

  /*
   * OpenRTB 3.3.9: describes the producer of content object, which might be different from the
   * publisher of the content of the page. This object is useful in the case of syndicated content,
   * such as embedded videos, for example.
   */
  message Producer {
    /*
     * Content producer or originator ID. Useful if content is syndicated,
     * and may be posted on a site using embed tags.
     */
    optional string id = 1;
    /*
     * Content producer or originator name (e.g., “Warner Bros”).
     */
    optional string name = 2;
    /*
     * Array of IAB content categories for the content producer.
     */
    repeated string cat = 3;
    /*
     * URL of the content producer.
     */
    optional string domain = 4;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }

  /*
   * OpenRTB 3.3.11: describes the current geographic location of the Device (e.g., based on IP
   * address or GPS), or the home geo of the User (e.g., based on registration data).
   * If both the Device and User objects contain Geo objects with different information,
   * it’s up to the bidder to determine which Geo information to use.
   */
  message Geo {
    /*
     * Latitude from -90 to 90. South is negative. This should only be passed if known
     * to be accurate (For example, not the centroid of a postal code).
     */
    optional double lat = 1;
    /*
     * Longitude from -180 to 180. West is negative. This should only be passed if known
     * to be accurate (For example, not the centroid of a postal code).
     */
    optional double lon = 2;
    /*
     * Indicate the source of the geo data (GPS, IP address, user provided).
     * Type should be provided when lat/lon is provided.
     */
    optional LocationType type = 9;
    /*
     * Country using ISO-3166-1 Alpha-3.
     */
    optional string country = 3;
    /*
     * Region using ISO 3166-2
     */
    optional string region = 4;
    /*
     * Region of a country using fips 10-4 notation (alternative to ISO 3166-2).
     */
    optional string regionfips104 = 5;
    /*
     * Pass the metro code (see http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
     * Metro codes are similar to but not exactly the same as Nielsen DMAs.
     */
    optional string metro = 6;
    /*
     * City using United Nations Code for Trade and Transport Locations
     * (http://www.unece.org/cefact/locode/service/location.htm).
     */
    optional string city = 7;
    /*
     * Zip/postal code.
     */
    optional string zip = 8;
    /**
     * Local device time as the number +/- of minutes from UTC.
     */
    optional int32 utcoffset = 10;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 6.15: how the geographic information was determined.
     */
    enum LocationType {
      GPS_LOCATION = 1;
      IP = 2;
      USER = 3;
    }
  }

  /*
   * OpenRTB 3.3.13: The data and segment objects together allow data about the user to be passed
   * to bidders in the bid request. This data may be from multiple sources (e.g., the exchange
   * itself, third party providers) as specified by the data object ID field.
   * A bid request can mix data objects from multiple providers.
   */
  message Data {
    /*
     * Exchange specific ID for the data provider.
     */
    optional string id = 1;
    /*
     * Data provider name.
     */
    optional string name = 2;
    /*
     * Array of segment objects.
     */
    repeated Segment segment = 3;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 3.3.14: convey specific units of information from the provider identified
     * in the parent data object.
     */
    message Segment {
      /*
       * ID of a data provider’s segment applicable to the user.
       */
      optional string id = 1;
      /*
       * Name of a data provider’s segment applicable to the user.
       */
      optional string name = 2;
      /*
       * String representing the value of the segment. The method for transmitting this data
       * should be negotiated offline with the data provider.
       * For example for gender, “male”, or “female”, for age, “30-40”).
       */
      optional string value = 3;
      /**
       * Extensions.
       */
      extensions 100 to 199;
    }
  }

  /*
   * OpenRTB 3.3.15: Legal, governmental, or industry regulations that apply to the request.
   */
  message Regulations {
    /*
     * Indicated wether or not this request falls under the COPPA regulations
     * established by the USA FTC.
     */
    optional bool coppa = 1;
    /**
     * Extensions.
     */
    extensions 100 to 199;
  }
}

/*
 * OpenRTB 4.3.1: top-level bid response object.
 */
message BidResponse {
  /*
   * OpenRTB 5.19: Options for a bidder to signal the exchange as to why it did not
   * offer a bid for the impression.
   */
  enum NoBidReasonCode {
    UNKNOWN_ERROR = 0;
    TECHNICAL_ERROR = 1;
    INVALID_REQUEST = 2;
    KNOWN_WEB_SPIDER = 3;
    SUSPECTED_NONHUMAN_TRAFFIC = 4;
    CLOUD_DC_PROXY_IP = 5;
    UNSUPPORTED_DEVICE = 6;
    BLOCKED_PUBISHER_SITE = 7;
    UNMATCHED_USER = 8;
  }

  /*
   * ID of the bid request.
   */
  optional string id = 1;
  /*
   * Array of seatbid objects.
   */
  repeated SeatBid seatbid = 2;
  /*
   * Bid response ID to assist tracking for bidders.
   * This value is chosen by the bidder for cross-reference.
   */
  optional string bidid = 3;
  /*
   * Bid currency using ISO-4217 alphabetic codes.
   */
  optional string cur = 4 [default = "USD"];
  /*
   * This is an optional feature, which allows a bidder to set data in the exchange’s cookie.
   * The string may be in base85 cookie safe characters, and be in any format.
   * This may be useful for storing user features.
   * Note: Proper JSON encoding must be used to include “escaped” quotation marks.
   */
  optional string customdata = 5;
  /**
   * Reason for not bidding.
   */
  optional NoBidReasonCode nbr = 6;
  /**
   * Extensions.
   */
  extensions 100 to 199;

  /*
   * OpenRTB 4.3.2: A bid response can contain multiple “seatbid” objects, each on behalf of a
   * different bidder seat. Since a bid request can include multiple impressions, each “seatbid”
   * object can contain multiple bids each pertaining to a different impression on behalf of a seat.
   * Thus, each “bid” object must include the impression ID to which it pertains as well as
   * the bid price. The “group” attribute can be used to specify if a seat is willing to accept
   * any impressions that it can win (default) or if it is only interested in winning any if it
   * can win them all (i.e., all or nothing).
   */
  message SeatBid {
    /*
     * Array of bid objects; each bid object relates to an imp object in the bid request.
     * Note that, if supported by an exchange, one imp object can have many bid objects.
     */
    repeated Bid bid = 1;
    /*
     * ID of the bidder seat on whose behalf this bid is made.
     */
    optional string seat = 2;
    /*
     * Should impressions be won or lost as a group?
     */
    optional bool group = 3;
    /**
     * Extensions.
     */
    extensions 100 to 199;

    /*
     * OpenRTB 4.3.3: For each bid, the “nurl” attribute contains the win notice URL.
     * If the bidder wins the impression, the exchange calls this notice URL a) to inform the bidder
     * of the win and b) to convey certain information using substitution macros
     * (see Section 4.6 Substitution Macros). The “adomain” attribute can be used to check
     * advertiser block list compliance. The “iurl” attribute can provide a link to an image that
     * is representative of the campaign’s content (irrespective of whether the campaign may have
     * multiple creatives). This enables human review for spotting inappropriate content.
     * The “cid” attribute can be used to block ads that were previously identified as
     * inappropriate; essentially a safety net beyond the block lists.  The “crid” attribute
     * can be helpful in reporting creative issues back to bidders. Finally, the “attr” array
     * indicates the creative attributes that describe the ad to be served.
     */
    message Bid {
      /*
       * ID for the bid object chosen by the bidder for tracking and debugging purposes.
       * Useful when multiple bids are submitted for a single impression for a given seat.
       */
      required string id = 1;
      /*
       * ID of the impression object to which this bid applies.
       */
      required string impid = 2;
      /*
       * Bid price in CPM. WARNING/Best Practice Note: Although this value is a float,
       * OpenRTB strongly suggests using integer math for accounting to avoid rounding errors.
       */
      required int64 price = 3;
      /*
       * ID that references the ad to be served if the bid wins.
       */
      optional string adid = 4;
      /*
       * Win notice URL. Note that ad markup is also typically, but not necessarily,
       * returned via this URL.
       */
      optional string nurl = 5;
      /*
       * Actual ad markup. XHTML if a response to a banner object,
       * or VAST XML if a response to a video object.
       * <p>
       * Open Bidder macros are supported for this field.
       */
      optional string adm = 6;
      /*
       * Advertiser’s primary or top-level domain for advertiser checking.
       * This can be a list of domains if there is a rotating creative.
       * However, exchanges may mandate that only one landing domain is allowed.
       */
      repeated string adomain = 7;
      /**
       * Bundle or package name (e.g., com.foo.mygame) of the app being advertised, if applicable;
       * intended to be a unique ID across exchanges.
       */
      optional string bundle = 15;
      /*
       * Sample image URL (without cache busting) for content checking.
       */
      optional string iurl = 8;
      /*
       * Campaign ID or similar that appears within the ad markup.
       */
      optional string cid = 9;
      /*
       * Creative ID for reporting content issues or defects.
       * This could also be used as a reference to a creative ID that is posted with an exchange.
       * <p>
       * Open Bidder macros are supported for this field.
       */
      optional string crid = 10;
      /**
       * IAB content category of the creative.
       */
      optional string cat = 16;
      /*
       * Array of creative attributes.
       */
      repeated CreativeAttribute attr = 11;
      /*
       * A unique identifier for the direct deal associated with the bid.
       */
      optional string dealid = 12;
      /**
       * Width of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
       * optional fields it is recommended that the response bid contains this field to signal
       * the size of ad chosen.
       */
       optional int32 w = 13;
      /**
       * Height of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
       * optional fields it is recommended that the response bid contains this field to signal
       * the size of ad chosen.
       */
       optional int32 h = 14;
      /**
       * Extensions.
       */
      extensions 100 to 199;
    }
  }
}
